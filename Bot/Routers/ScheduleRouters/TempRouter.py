from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from aiogram.utils.markdown import hbold

from Bot.Middlewares.IsReg import IsRegMiddleware
from ORM.Schedule_information import GroupSchedule, Weekday, WeekType
from ORM.Users_info import User

tempRouter = Router()

tempRouter.message.middleware(IsRegMiddleware())


@tempRouter.message(F.text == "–°–µ–≥–æ–¥–Ω—è")
async def start_messaging(message: Message, state: FSMContext) -> None:
    await state.clear()
    user_id = message.from_user.id

    group_number = User.get_group_number(user_id)

    today = Weekday.get_today()

    if today == "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ":
        await message.answer("–°–µ–≥–æ–¥–Ω—è –≤—ã—Ö–æ–¥–Ω–æ–π! üéâ")
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
    sorted_schedule = GroupSchedule.get_schedule(group_number, today)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
    if sorted_schedule:

        week_type = WeekType.get_current_week()
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        formatted_schedule = format_schedule(sorted_schedule, week_type)
        await message.answer(f"{hbold(f'–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ {group_number}')}:\n\n{formatted_schedule}")
    else:
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")


@tempRouter.message(F.text == "–ó–∞–≤—Ç—Ä–∞")
async def start_messaging(message: Message, state: FSMContext) -> None:
    await state.clear()
    user_id = message.from_user.id

    group_number = User.get_group_number(user_id)

    tomorrow = Weekday.get_tomorrow(Weekday.get_today())

    if tomorrow == "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ":
        await message.answer("–ó–∞–≤—Ç—Ä–∞ –≤—ã—Ö–æ–¥–Ω–æ–π! üéâ")
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
    sorted_schedule = GroupSchedule.get_schedule(group_number, tomorrow)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
    if sorted_schedule:

        week_type = WeekType.get_tomorrow_week()
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        formatted_schedule = format_schedule(sorted_schedule, week_type)
        await message.answer(f"{hbold(f'–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ {group_number}')}:\n\n{formatted_schedule}")
    else:
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")


def format_schedule(sorted_schedule: dict, week_type: str) -> str:
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    formatted_schedule = f"{hbold('–ù–µ–¥–µ–ª—è:')} {week_type}\n\n"

    for day, day_schedule in sorted_schedule.items():
        formatted_schedule += f"–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏: {hbold(day)}\n\n"

        for pair_data in day_schedule:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–∞—Ä–∞ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–π –Ω–µ–¥–µ–ª–µ
            if pair_data['–ù–µ–¥–µ–ª—è'] == week_type or pair_data['–ù–µ–¥–µ–ª—è'] == '–û–±–µ –Ω–µ–¥–µ–ª–∏':
                pair = pair_data['–î–∞–Ω–Ω—ã–µ –ø–∞—Ä—ã']
                formatted_schedule += f"üîπ {pair['–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞']}-{pair['–í—Ä–µ–º—è –∫–æ–Ω—Ü–∞']} "
                formatted_schedule += f"{hbold(pair['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞'])} "
                formatted_schedule += f"({pair['–¢–∏–ø –∑–∞–Ω—è—Ç–∏—è']})\n"
                if pair['–§–∞–º–∏–ª–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è']:
                    formatted_schedule += f"–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {hbold(pair['–§–∞–º–∏–ª–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è'])} " \
                                          f"{hbold(pair['–ò–º—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è'][:1] + '.' + pair['–û—Ç—á–µ—Å—Ç–≤–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è'][:1])}.\n"
                formatted_schedule += f"–ê—É–¥–∏—Ç–æ—Ä–∏—è: {pair['–ö–æ—Ä–ø—É—Å']} {pair['–ù–æ–º–µ—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏']}\n\n"

    return formatted_schedule


def format_dual_week_schedule(sorted_schedule: dict) -> str:
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    formatted_schedule = ""

    for day, day_schedule in sorted_schedule.items():
        formatted_schedule += f"–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏: {hbold(day)}\n\n"

        # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–∞—Ä, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –≤—ã–≤–µ–¥–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        displayed_times = set()

        for pair_data in day_schedule:
            pair = pair_data['–î–∞–Ω–Ω—ã–µ –ø–∞—Ä—ã']
            week_type = pair_data['–ù–µ–¥–µ–ª—è']
            pair_time = pair['–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞']

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ —É–∂–µ –≤—ã–≤–µ–¥–µ–Ω–æ –≤—Ä–µ–º—è –¥–ª—è –¥–∞–Ω–Ω–æ–π –ø–∞—Ä—ã
            if pair_time not in displayed_times:
                # –í—ã–≤–æ–¥–∏–º –≤—Ä–µ–º—è –ø–∞—Ä—ã —Å —Å–∏–º–≤–æ–ª–æ–º üîπ
                formatted_schedule += f"üîπ {pair_time}-{pair['–í—Ä–µ–º—è –∫–æ–Ω—Ü–∞']}\n"
                # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –≤ —Å–ø–∏—Å–æ–∫ —É–∂–µ –≤—ã–≤–µ–¥–µ–Ω–Ω—ã—Ö
                displayed_times.add(pair_time)

            # –ü–∏—à–µ–º –≤ –∫–∞–∫—É—é –Ω–µ–¥–µ–ª—é –±—É–¥–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –ø–∞—Ä–∞
            formatted_schedule += f"{hbold(week_type)}:\n"

            # –ü–∏—à–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–∞—Ä–µ
            formatted_schedule += f"{pair['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞']} "
            formatted_schedule += f"({pair['–¢–∏–ø –∑–∞–Ω—è—Ç–∏—è']})\n"

            if pair['–§–∞–º–∏–ª–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è']:
                formatted_schedule += f"–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {pair['–§–∞–º–∏–ª–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è']}. "
                formatted_schedule += f"{pair['–ò–º—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è'][:1]}. "
                formatted_schedule += f"{pair['–û—Ç—á–µ—Å—Ç–≤–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è'][:1]}.\n"
            formatted_schedule += f"–ê—É–¥–∏—Ç–æ—Ä–∏—è: {pair['–ö–æ—Ä–ø—É—Å']} {pair['–ù–æ–º–µ—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏']}\n\n"

    return formatted_schedule
