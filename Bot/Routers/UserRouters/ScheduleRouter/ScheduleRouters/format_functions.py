from aiogram.utils.markdown import hbold


def format_schedule(sorted_schedule: dict, week_type: str) -> str:
    def weekday_data(data, day_schedule):
        if data['–ù–µ–¥–µ–ª—è'] == week_type or data['–ù–µ–¥–µ–ª—è'] == '–û–±–µ –Ω–µ–¥–µ–ª–∏':
            pair = data['–î–∞–Ω–Ω—ã–µ –ø–∞—Ä—ã']
            day_schedule += f"üîπ {pair['–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞']}-{pair['–í—Ä–µ–º—è –∫–æ–Ω—Ü–∞']} ‚Äî {hbold(pair['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞'])} "
            day_schedule += f"({pair['–¢–∏–ø –∑–∞–Ω—è—Ç–∏—è']})\n"
            if pair['–§–∞–º–∏–ª–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è']:
                day_schedule += f"üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {hbold(pair['–§–∞–º–∏–ª–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è'])} " \
                                f"{hbold(pair['–ò–º—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è'][:1] + '.' + pair['–û—Ç—á–µ—Å—Ç–≤–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è'][:1])}.\n"
            day_schedule += f"üè´ –ê—É–¥–∏—Ç–æ—Ä–∏—è: {pair['–ö–æ—Ä–ø—É—Å']} {pair['–ù–æ–º–µ—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏']}\n"
            if pair['–ì—Ä—É–ø–ø—ã']:
                day_schedule += f"üë• –î—Ä—É–≥–∏–µ –≥—Ä—É–ø–ø—ã: {', '.join(map(str, pair['–ì—Ä—É–ø–ø—ã']))}\n"
            day_schedule += "‚Äî" * 20 + "\n"
        return day_schedule

    formatted_schedule = f"{hbold('–ù–µ–¥–µ–ª—è:')} {week_type}\n\n"
    for day, day_schedule in sorted_schedule.items():
        formatted_schedule += f"üìÖ {hbold(day)}:\n\n"
        for pair_data in day_schedule:
            formatted_schedule = weekday_data(pair_data, formatted_schedule)

    return formatted_schedule


def format_dual_week_schedule(sorted_schedule: dict) -> str:
    def dual_week_data(data, format_schedule):
        pair = data['–î–∞–Ω–Ω—ã–µ –ø–∞—Ä—ã']
        week_type = data['–ù–µ–¥–µ–ª—è']
        pair_time = pair['–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞']

        if pair_time not in displayed_times:
            format_schedule += f"üîπ {pair_time}-{pair['–í—Ä–µ–º—è –∫–æ–Ω—Ü–∞']}\n"
            displayed_times.add(pair_time)

        format_schedule += f"{hbold(week_type)}:\n"
        format_schedule += f"{hbold(pair['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞'])} "
        format_schedule += f"({pair['–¢–∏–ø –∑–∞–Ω—è—Ç–∏—è']})\n"
        if pair['–§–∞–º–∏–ª–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è']:
            format_schedule += f"üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {pair['–§–∞–º–∏–ª–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è']} " \
                               f"{pair['–ò–º—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è'][:1]}. {pair['–û—Ç—á–µ—Å—Ç–≤–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è'][:1]}.\n"
        format_schedule += f"üè´ –ê—É–¥–∏—Ç–æ—Ä–∏—è: {pair['–ö–æ—Ä–ø—É—Å']} {pair['–ù–æ–º–µ—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏']}\n"
        if pair['–ì—Ä—É–ø–ø—ã']:
            format_schedule += f"üë• –î—Ä—É–≥–∏–µ –≥—Ä—É–ø–ø—ã: {', '.join(map(str, pair['–ì—Ä—É–ø–ø—ã']))}\n"
        format_schedule += "‚Äî" * 20 + "\n"
        return format_schedule

    formatted_schedule = ""
    for day, day_schedule in sorted_schedule.items():
        formatted_schedule += f"üìÖ {hbold(day)}:\n\n"
        displayed_times = set()
        for pair_data in day_schedule:
            formatted_schedule = dual_week_data(pair_data, formatted_schedule)

    return formatted_schedule


def format_teacher_schedule(sorted_schedule: dict, week_type: str) -> str:
    def weekday_data(data, day_schedule):
        if data['–ù–µ–¥–µ–ª—è'] == week_type or data['–ù–µ–¥–µ–ª—è'] == '–û–±–µ –Ω–µ–¥–µ–ª–∏':
            pair = data['–î–∞–Ω–Ω—ã–µ –ø–∞—Ä—ã']
            day_schedule += f"üîπ {pair['–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞']}-{pair['–í—Ä–µ–º—è –∫–æ–Ω—Ü–∞']} ‚Äî {hbold(pair['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞'])} "
            day_schedule += f"({pair['–¢–∏–ø –∑–∞–Ω—è—Ç–∏—è']})\n"
            day_schedule += f"üë• –ì—Ä—É–ø–ø—ã: {', '.join(map(str, pair['–ì—Ä—É–ø–ø—ã']))}\n"
            day_schedule += f"üè´ –ê—É–¥–∏—Ç–æ—Ä–∏—è: {pair['–ö–æ—Ä–ø—É—Å']} {pair['–ù–æ–º–µ—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏']}\n"
            day_schedule += "‚Äî" * 20 + "\n"
        return day_schedule

    formatted_schedule = f"{hbold('–ù–µ–¥–µ–ª—è:')} {week_type}\n\n"
    for day, day_schedule in sorted_schedule.items():
        formatted_schedule += f"üìÖ {hbold(day)}:\n\n"
        for pair_data in day_schedule:
            formatted_schedule = weekday_data(pair_data, formatted_schedule)

    return formatted_schedule


def format_teacher_dual_week_schedule(sorted_schedule: dict) -> str:
    def dual_week_data(data, format_schedule):
        pair = data['–î–∞–Ω–Ω—ã–µ –ø–∞—Ä—ã']
        week_type = data['–ù–µ–¥–µ–ª—è']
        pair_time = pair['–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞']

        if pair_time not in displayed_times:
            format_schedule += f"üîπ {pair_time}-{pair['–í—Ä–µ–º—è –∫–æ–Ω—Ü–∞']}\n"
            displayed_times.add(pair_time)

        format_schedule += f"{hbold(week_type)}:\n"
        format_schedule += f"{hbold(pair['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞'])} "
        format_schedule += f"({pair['–¢–∏–ø –∑–∞–Ω—è—Ç–∏—è']})\n"
        format_schedule += f"üë• –ì—Ä—É–ø–ø—ã: {', '.join(map(str, pair['–ì—Ä—É–ø–ø—ã']))}\n"
        format_schedule += f"üè´ –ê—É–¥–∏—Ç–æ—Ä–∏—è: {pair['–ö–æ—Ä–ø—É—Å']} {pair['–ù–æ–º–µ—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏']}\n"
        format_schedule += "‚Äî" * 20 + "\n"

        return format_schedule

    formatted_schedule = ""
    for day, day_schedule in sorted_schedule.items():
        formatted_schedule += f"üìÖ {hbold(day)}:\n\n"
        displayed_times = set()
        for pair_data in day_schedule:
            formatted_schedule = dual_week_data(pair_data, formatted_schedule)

    return formatted_schedule
