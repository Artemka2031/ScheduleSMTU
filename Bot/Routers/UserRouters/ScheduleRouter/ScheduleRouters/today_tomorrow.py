from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from aiogram.utils.markdown import hbold

from Bot.Middlewares.authentication_middleware import IsRegMiddleware
from Bot.Routers.UserRouters.ScheduleRouter.ScheduleRouters.format_functions import format_schedule
from Bot.RabbitMQProducer.producer_api import send_request_mq


TodayTomorrowRouter = Router()

TodayTomorrowRouter.message.middleware(IsRegMiddleware())


@TodayTomorrowRouter.message(F.text == "–°–µ–≥–æ–¥–Ω—è")
async def schedule_today(message: Message, state: FSMContext) -> None:
    await state.clear()
    user_id = message.from_user.id

    group_number = await send_request_mq('bot.tasks.get_group_number', [user_id])
    #group_number = BaseUser.get_group_number(user_id)
    today = await send_request_mq('bot.tasks.get_today', [])
    #today = Weekday.get_today()

    if today == "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ":
        await message.answer("–°–µ–≥–æ–¥–Ω—è –≤—ã—Ö–æ–¥–Ω–æ–π! üéâ")
        return
    sorted_schedule = await send_request_mq('bot.tasks.get_schedule', [group_number, today])
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
    #sorted_schedule = GroupSchedule.get_schedule(group_number, today)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
    if sorted_schedule:
        week_type = await send_request_mq('bot.tasks.get_current_week', [])
        #week_type = WeekType.get_current_week()
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        formatted_schedule = format_schedule(sorted_schedule, week_type)
        await message.answer(f"{hbold(f'–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ {group_number}')}:\n\n{formatted_schedule}")
    else:
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")


@TodayTomorrowRouter.message(F.text == "–ó–∞–≤—Ç—Ä–∞")
async def schedule_tomorrow(message: Message, state: FSMContext) -> None:
    await state.clear()
    user_id = message.from_user.id
    group_number = await send_request_mq('bot.tasks.get_group_number', [user_id])
    #group_number = BaseUser.get_group_number(user_id)
    today = await send_request_mq('bot.tasks.get_today', [])

    tomorrow = await send_request_mq('bot.tasks.get_tomorrow', [today])
    #tomorrow = Weekday.get_tomorrow(Weekday.get_today())

    if tomorrow == "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ":
        await message.answer("–ó–∞–≤—Ç—Ä–∞ –≤—ã—Ö–æ–¥–Ω–æ–π! üéâ")
        return
    sorted_schedule = await send_request_mq('bot.tasks.get_schedule', [group_number, tomorrow])
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
    #sorted_schedule = GroupSchedule.get_schedule(group_number, tomorrow)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
    if sorted_schedule:
        week_type = await send_request_mq('bot.tasks.get_tomorrow_week', [])
        #week_type = WeekType.get_tomorrow_week()
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        formatted_schedule = format_schedule(sorted_schedule, week_type)
        await message.answer(f"{hbold(f'–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ {group_number}')}:\n\n{formatted_schedule}")
    else:
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")


