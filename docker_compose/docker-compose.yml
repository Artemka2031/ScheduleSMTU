version: '3.8'

services:
  mariadb:
    image: mariadb:10.6
    container_name: mariadb
    ports:
      - "3306:3306"  # Порт для подключения к MariaDB
    environment:
      MYSQL_DATABASE: schedule
      MYSQL_USER: schedule_SMTU
      MYSQL_PASSWORD: wD7jQ#2zRt!vY6Tp
      MYSQL_ROOT_PASSWORD: rootpassword  # Пароль для root-пользователя
    volumes:
      - mariadb_data:/var/lib/mysql
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-prootpassword"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  mariadb_data:

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    depends_on:
      - rabbitmq
    networks:
      - app-network
    command: ["redis-server", "--requirepass", "ScheduleSMTU"]
    environment:
      - REDIS_PASSWORD=ScheduleSMTU
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "ScheduleSMTU", "PING"]
      interval: 10s
      timeout: 5s
      retries: 5

  telegram_bot:
    build:
      context: ../  # Указываем корневую директорию проекта
      dockerfile: Bot/Dockerfile  # Путь к Dockerfile бота
    container_name: telegram_bot
    depends_on:
      rabbitmq:
        condition: service_healthy  # Убедиться, что RabbitMQ готов
    environment:
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ScheduleSMTU
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: rabbitmq
      RABBITMQ_PASSWORD: ScheduleSMTU
    command: ["/app/Bot/wait-for-it.sh", "rabbitmq:5672", "--", "python", "Bot/start_bot.py"]
    networks:
      - app-network

networks:
  app-network:
    driver: bridge